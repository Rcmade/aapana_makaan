"use client";

import React, { useState, useRef, useEffect, FC } from "react";
import { Input } from "@/components/ui/input";
import { extractAddressComponents } from "@/lib/utils/formateData";
import { Children, PropertyFormSchemaT } from "@/types";
import useMapLoader from "@/hooks/useMapLoader";

type Address = PropertyFormSchemaT["address"] & {};

interface AutoCompleteSearchInputProps {
  value?: string;
  onChange: (address: Address) => void;
  isApiNeedToLoad: boolean;
}

const AutoCompleteSearchInput: FC<AutoCompleteSearchInputProps> = ({
  isApiNeedToLoad,
  value,
  onChange,
}) => {
  return isApiNeedToLoad ? (
    <>
      <ApiLoader>
        <PlaceAutocomplete
          value={value}
          onPlaceSelect={(place) => {
            if (!place.geometry?.location) return;
            const latLng = {
              lat: place.geometry.location.lat(),
              lng: place.geometry.location.lng(),
            };
            onChange(extractAddressComponents(place, latLng));
          }}
        />
      </ApiLoader>
    </>
  ) : (
    <PlaceAutocomplete
      value={value}
      onPlaceSelect={(place) => {
        if (!place.geometry?.location) return;
        const latLng = {
          lat: place.geometry.location.lat(),
          lng: place.geometry.location.lng(),
        };
        onChange(extractAddressComponents(place, latLng));
      }}
    />
  );
};

interface PlaceAutocompleteProps {
  // info: "basic" | "withLatLng";
  value?: string;
  onPlaceSelect: (place: google.maps.places.PlaceResult) => void;
}

const PlaceAutocomplete: FC<PlaceAutocompleteProps> = ({
  value,
  onPlaceSelect,
}) => {
  const inputRef = useRef<HTMLInputElement>(null);
  const [autocomplete, setAutocomplete] =
    useState<google.maps.places.Autocomplete | null>(null);

  useEffect(() => {
    if (!inputRef.current) return;

    const options = {
      fields: ["geometry", "name", "formatted_address", "address_components"],
    };
    const autoCompleteInstance = new window.google.maps.places.Autocomplete(
      inputRef.current,
      options,
    );
    setAutocomplete(autoCompleteInstance);

    // Cleanup listener on unmount
    const listener = autoCompleteInstance.addListener("place_changed", () => {
      const place = autoCompleteInstance.getPlace();
      onPlaceSelect(place);
    });

    return () => {
      listener.remove();
    };
  }, [onPlaceSelect]);

  return (
    <Input
      ref={inputRef}
      placeholder="Search for a location..."
      defaultValue={value}
    />
  );
};

const ApiLoader = ({ children }: Children) => {
  const { isLoaded } = useMapLoader();

  return isLoaded ? <>{children}</> : null;
};

export default AutoCompleteSearchInput;
















































































































"use client";

import React, { useState, useRef, useEffect, FC } from "react";
import { Input } from "@/components/ui/input";
import { extractAddressComponents } from "@/lib/utils/formateData";
import { PropertyFormSchemaT } from "@/types";
import useMapLoader from "@/hooks/useMapLoader";

// Type for the Address object
type Address = PropertyFormSchemaT["address"] & {};

interface AutoCompletePlaceSearchInputProps {
  value?: string;
  onChange?: (address: Address) => void;
  isApiNeedToLoad: boolean;
}

// Main component for the autocomplete search input
const AutoCompletePlaceSearchInput: FC<AutoCompletePlaceSearchInputProps> = ({
  isApiNeedToLoad,
  value,
  onChange,
}) => {
  return isApiNeedToLoad ? (
    <ApiLoader>
      <PlaceAutocomplete value={value} onPlaceSelect={onChange} />
    </ApiLoader>
  ) : (
    <PlaceAutocomplete value={value} onPlaceSelect={onChange} />
  );
};

interface PlaceAutocompleteProps {
  value?: string;
  onPlaceSelect?: (address: Address) => void;
}

// PlaceAutocomplete component that handles the Google Maps Autocomplete
const PlaceAutocomplete: FC<PlaceAutocompleteProps> = ({
  value,
  onPlaceSelect,
}) => {
  const inputRef = useRef<HTMLInputElement>(null);
  const [autocomplete, setAutocomplete] =
    useState<google.maps.places.Autocomplete | null>(null);

  // Initialize autocomplete when the component mounts
  useEffect(() => {
    if (!inputRef.current) return;

    const options = {
      fields: ["geometry", "name", "formatted_address", "address_components"],
    };

    const autoCompleteInstance = new window.google.maps.places.Autocomplete(
      inputRef.current,
      options,
    );
    setAutocomplete(autoCompleteInstance);

    // Cleanup listener on unmount
    return () => {
      if (autoCompleteInstance) {
        autoCompleteInstance.unbindAll();
      }
    };
  }, []);

  // Add listener for place selection and pass selected place to onPlaceSelect
  useEffect(() => {
    if (!autocomplete) return;

    const listener = autocomplete.addListener("place_changed", () => {
      const place = autocomplete.getPlace();

      // Check if the place has a valid geometry and extract the address components
      if (!place.geometry?.location) return;

      // Extract the address components from the place object
      const latLng = {
        lat: place.geometry.location.lat(),
        lng: place.geometry.location.lng(),
      };

      // Transform the PlaceResult into your custom address structure
      const address: Address = extractAddressComponents(place, latLng);

      // Call the onChange handler with the transformed address
      if (onPlaceSelect) onPlaceSelect(address);
    });

    // Cleanup listener when the effect runs again or component unmounts
    return () => {
      listener.remove();
    };
  }, [autocomplete, onPlaceSelect]);

  return (
    <Input
      ref={inputRef}
      placeholder="Search for a location..."
      defaultValue={value}
    />
  );
};

// ApiLoader component that waits for the map API to load before rendering children
const ApiLoader: FC<{ children: React.ReactNode }> = ({ children }) => {
  const { isLoaded } = useMapLoader();

  return isLoaded ? <>{children}</> : null;
};

export default AutoCompletePlaceSearchInput;























































































"use client";
import React, { useRef, useState } from "react";
import { ChevronDown, SearchIcon } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Command } from "@/components/ui/command";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";

import { Autocomplete } from "@react-google-maps/api";
import { Input } from "../ui/input";
import useMapLoader from "@/hooks/useMapLoader";
import {
  createQueryString,
  searchParamsToObject,
} from "@/lib/utils/stringUtils";
import { useRouter, useSearchParams } from "next/navigation";
import { SearchPropertyRequestParamsT } from "@/types/apiResponse";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import { detailedPropertyType } from "@/zodSchema/propertySchema";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { searchPropertiesSchema } from "@/zodSchema/searchSchema";
import { SearchPropertiesSchemaT } from "@/types";
import { Form } from "../ui/form";
import AutoCompletePlaceSearchInput from "./AutoCompletePlaceSearchInput";
import { handlePopoverOpenChange } from "@/lib/utils";

const PropertySearchInput = () => {
  const [open, setOpen] = React.useState(false);
  const searchParams = useSearchParams();
  const searchParamsObj: SearchPropertyRequestParamsT = searchParamsToObject(
    searchParams.toString(),
  );

  const autocompleteRef = useRef<google.maps.places.Autocomplete | null>(null);
  const { isLoaded } = useMapLoader();
  const { push } = useRouter();

  const form = useForm<SearchPropertiesSchemaT>({
    resolver: zodResolver(searchPropertiesSchema),
    defaultValues: {
      detailedPropertyType: searchParamsObj.category || "",
      lat: searchParamsObj.lat || 0,
      lng: searchParamsObj.lng || 0,
      search: searchParamsObj.search || "",
    },
  });

  const handlePlaceChanged = async () => {
    const place = autocompleteRef.current?.getPlace();
    if (place?.geometry?.location) {
      const location = place.geometry.location;
      const latLng = { lat: location.lat(), lng: location.lng() };

      const params = {
        search: place.formatted_address || "",
        ...latLng,
      } satisfies SearchPropertyRequestParamsT;

      form.setValue("lat", params.lat);
      form.setValue("lng", params.lng);
      form.setValue("search", params.search);
    }
  };

  const onSubmit = async (data: SearchPropertiesSchemaT) => {
    const str = createQueryString({
      ...data,
      category: data?.detailedPropertyType,
    });
    // console.log({ str });
    push(`/search${str}`);
  };

  const searchInput = form.watch("search");

  return (
    <Form {...form}>
      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="flex items-center justify-between gap-4 rounded-md bg-primary-foreground px-4 py-4 text-foreground shadow-sm"
      >
        <Popover
          modal
          open={open}
          onOpenChange={(open) =>
            handlePopoverOpenChange(open, setOpen, ".pac-container")
          }
        >
          <PopoverTrigger asChild>
            <Button
              variant="outline"
              role="combobox"
              className="w-[180px] justify-between border-0 px-4 hover:bg-accent"
              key={form.getValues("search")}
            >
              <span>
                {form.getValues("search")
                  ? `${form.getValues("search")?.substring(0, 20)}...`
                  : "Location"}
              </span>
              <ChevronDown className="ml-2 h-4 w-4 shrink-0 opacity-50" />
            </Button>
          </PopoverTrigger>

          <PopoverContent align="start" className="-ml-4 mt-4 w-[26rem] p-0">
            <AutoCompletePlaceSearchInput
              isApiNeedToLoad
              onChange={(a) => {
                form.setValue("lat", a.lat);
                form.setValue("lng", a.lng);
                form.setValue("search", a.completeAddress);
                setTimeout(() => {
                  setOpen(false);
                }, 0);
              }}
              value={searchInput}
            />
          </PopoverContent>
        </Popover>

        <span className="block h-6 w-[1px] bg-primary/20"></span>
        <Select onValueChange={(e) => form.setValue("detailedPropertyType", e)}>
          <SelectTrigger className="w-[180px] border-0 bg-transparent hover:bg-accent">
            <SelectValue placeholder="Property Type" />
          </SelectTrigger>
          <SelectContent>
            {detailedPropertyType.map((p) => (
              <SelectItem key={p} value={p}>
                {p}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>

        <Button type="submit" variant="destructive">
          Search <SearchIcon className="ml-2 h-4 w-4" />
        </Button>
      </form>
    </Form>
  );
};

export default PropertySearchInput;




















































































"use client";

import { useState, useCallback } from "react";
import { GoogleMap, Marker, InfoWindow } from "@react-google-maps/api";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import useMapLoader from "@/hooks/useMapLoader";
import DefaultMaps from "@/components/maps/DefaultMaps";

const containerStyle = {
  width: "100%",
  height: "600px",
};

const center = {
  lat: 22.719568,
  lng: 75.857727,
};

const properties = [
  {
    id: 1,
    price: "$1,620",
    lat: 22.719568,
    lng: 75.857727,
    address: "40 Sample St, Brooklyn, NY 11249",
    image: "/placeholder.svg?height=100&width=150",
  },
  {
    id: 2,
    price: "$1.4K",
    lat: 22.7568,
    lng: 75.857727,
    address: "41 Sample St, Brooklyn, NY 11249",
    image: "/placeholder.svg?height=100&width=150",
  },
  // Add more properties as needed
];

export default function MapComponent() {
  const [selectedProperty, setSelectedProperty] = useState(null);
  const { isLoaded } = useMapLoader();

  const [map, setMap] = useState(null);

  const onLoad = useCallback((map) => {
    const bounds = new window.google.maps.LatLngBounds(center);
    properties.forEach(({ lat, lng }) => bounds.extend({ lat, lng }));
    map.fitBounds(bounds);
    setMap(map);
  }, []);

  const onUnmount = useCallback(() => {
    setMap(null);
  }, []);

  if (!isLoaded) return <div>Loading...</div>;

  return (
    <>
      <GoogleMap
        mapContainerStyle={containerStyle}
        center={center}
        zoom={14}
        onLoad={onLoad}
        onUnmount={onUnmount}
        // mapTypeId="ROADMAP"
      >
        {properties.map((property) => (
          <Marker
            key={property.id}
            position={{ lat: property.lat, lng: property.lng }}
            onClick={() => setSelectedProperty(property)}
            icon={{
              path: "M-1.547 12l6.563-6.609-1.406-1.406-5.156 5.203-2.063-2.109-1.406 1.406zM0 0q2.906 0 4.945 2.039t2.039 4.945q0 1.453-0.727 3.328t-1.758 3.516-2.039 3.070-1.711 2.273l-0.75 0.797q-0.281-0.328-0.75-0.867t-1.688-2.156-2.133-3.141-1.664-3.445-0.75-3.375q0-2.906 2.039-4.945t4.945-2.039z",
              fillColor: "#FF0000",
              fillOpacity: 1,
              strokeWeight: 0,
              rotation: 0,
              scale: 2,
              anchor: new window.google.maps.Point(15, 30),
              labelOrigin: new window.google.maps.Point(15, -10),
            }}
            label={{
              text: property.price,
              color: "white",
              fontSize: "14px",
              fontWeight: "bold",
            }}
          />
        ))}

        {selectedProperty && (
          <InfoWindow
            position={{ lat: selectedProperty.lat, lng: selectedProperty.lng }}
            onCloseClick={() => setSelectedProperty(null)}
          >
            <Card className="w-64">
              <CardHeader>
                <img
                  src={selectedProperty.image}
                  alt="Property"
                  className="h-32 w-full object-cover"
                />
                <CardTitle>{selectedProperty.price}</CardTitle>
                <CardDescription>{selectedProperty.address}</CardDescription>
              </CardHeader>
              <CardContent>
                <p>45 sqm</p>
                <p>2 Beds, 1 Bath</p>
              </CardContent>
            </Card>
          </InfoWindow>
        )}
      </GoogleMap>
    </>
  );
}



















"use client";

import useMapLoader from "@/hooks/useMapLoader";
import { SearchPropertyResponseT } from "@/types/apiResponse";
import { GoogleMap, InfoWindow, Marker } from "@react-google-maps/api";
import React, { useCallback, useMemo, useState } from "react";
import PropertyCard from "../card/PropertyCard";
import { svgMarker } from "@/constant";
import { formatPrice } from "@/lib/utils/formateData";

const center = {
  lat: 22.719568,
  lng: 75.857727,
};

const containerStyle = {
  width: "100%",
  height: "50rem",
};

interface SearchPropertyMapProps extends SearchPropertyResponseT {
  // properties: SearchPropertyResponseT["properties"];
}

const SearchPropertyMap = ({
  properties,
  pagination,
}: SearchPropertyMapProps) => {
  const [selectedProperty, setSelectedProperty] = useState<
    SearchPropertyResponseT["properties"][number] | null
  >(null);

  const { isLoaded } = useMapLoader();
  const [map, setMap] = useState<google.maps.Map | null>(null);

  // Map load handler
  const onLoad = useCallback(
    (map: google.maps.Map) => {
      const bounds = new window.google.maps.LatLngBounds();
      properties.forEach(({ location }) => {
        const lat = location.y;
        const lng = location.x;
        bounds.extend({ lat, lng });
      });
      map.fitBounds(bounds);

      const listener = google.maps.event.addListener(map, "idle", () => {
        if ((map?.getZoom?.() ?? 0) > 15) {
          map.setZoom(15); // Set a maximum zoom level
        }
        google.maps.event.removeListener(listener); // Remove the listener to prevent it from firing repeatedly
      });

      setMap(map);
    },
    [properties],
  );

  // Map unload handler
  const onUnmount = useCallback(() => {
    setMap(null);
  }, []);

  return (
    <>
      {isLoaded && (
        <GoogleMap
          // key={JSON.stringify(pagination)}
          center={center}
          zoom={12}
          onLoad={onLoad}
          onUnmount={onUnmount}
          options={{
            zoomControl: true,
            scrollwheel: true,
            mapTypeId: "roadmap",
          }}
        >
          <div key={JSON.stringify(pagination)}>
            {properties.map((property) => (
              <Marker
                key={property.id}
                position={{
                  lat: property.location.y,
                  lng: property.location.x,
                }}
                onClick={() => setSelectedProperty(property)}
                icon={{
                  url: "https://res.cloudinary.com/dg3fkrz9h/image/upload/f_auto,q_auto/ppyoancft6glh7tb3krg",
                  fillOpacity: 1,
                  scaledSize: new window.google.maps.Size(37, 37),
                  anchor: new window.google.maps.Point(18.5, 37),
                  labelOrigin: new window.google.maps.Point(18.5, 48), // Position label below marker
                }}
                label={{
                  text: `₹${formatPrice(+property.price)}`,
                  className:
                    "font-weight bg-primary-foreground p-2  mt-4 shadow-md rounded-md text-primary",
                }}
              />
            ))}
          </div>
          {selectedProperty && (
            <InfoWindow
              position={{
                lat: selectedProperty.location.y,
                lng: selectedProperty.location.x,
              }}
              onCloseClick={() => setSelectedProperty(null)}
              options={{
                pixelOffset: new window.google.maps.Size(0, -27),
              }}
            >
              <PropertyCard
                className="max-w-80 border-none"
                property={selectedProperty}
              />
            </InfoWindow>
          )}
        </GoogleMap>
      )}
    </>
  );
};

export default SearchPropertyMap;
